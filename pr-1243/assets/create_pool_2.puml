'To render with PlantUML:
'  java -jar plantuml.jar -o generated create_pool_2.puml
@startuml
participant "USS 1" as USS1
participant "USS 2" as USS2
participant "Pool state" as PoolState

note over USS1: Create DSS instance,\ninitialize cluster
note over PoolState: Pool ready with\n1 instance
note over USS1: Run prober on DSS instance\nto verify functionality
note over PoolState: Pool verified with\n1 instance

USS2 -> USS1: Request ca.crt and\nCRDB node addresses
note over USS2: Follow instructions\nto make-certs.py
USS1 --> USS2: Provide ca.crt and\nCRDB node addresses
note over USS2: Run make-certs.py
USS2 -> USS1: Provide combined ca.crt
note over USS2: Follow instructions\nto `tk apply`
note over USS1: Restart CRDB nodes\nwith combined ca.crt
note over PoolState: Pool ready to accept\nsecond instance
USS1 -> USS2: Verify ready for pool
note over USS2: `tk apply` to deploy\nDSS instance
note over PoolState: Pool ready with\n2 instances
note over USS2: Run prober on DSS instance\nto verify functionality
note over USS1: Run prober on DSS instance\nto verify no regression
note right of USS1: USS 1 and/or USS 2 run\ninterop test on DSS instances\nto verify functionality
note over PoolState: Pool verified with\n2 instances

USS2 -> USS1: Provide CRDB node addresses
note over USS1: Update JoinExisting\nnode list
note over PoolState: USS 1 will automatically\nrejoin pool upon restart
@enduml
